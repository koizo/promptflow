name: "ocr_analysis"
version: "1.0.0"
description: "Complete OCR analysis flow combining image text extraction and LLM analysis"

# Input schema - defines the API parameters
inputs:
  - name: "file"
    type: "file"
    required: true
    description: "Image file to analyze (JPEG, PNG, TIFF, BMP, GIF)"
  
  - name: "analysis_type"
    type: "string"
    required: false
    default: "comprehensive"
    enum: ["summary", "comprehensive", "key_points", "entities", "custom"]
    description: "Type of analysis to perform"
  
  - name: "custom_prompt"
    type: "string"
    required: false
    description: "Custom analysis prompt (used when analysis_type is 'custom')"
  
  - name: "ocr_provider"
    type: "string"
    required: false
    default: "tesseract"
    enum: ["tesseract", "huggingface"]
    description: "OCR provider to use"
  
  - name: "languages"
    type: "array"
    required: false
    default: ["en"]
    description: "Languages for OCR processing"
  
  - name: "llm_model"
    type: "string"
    required: false
    default: "mistral"
    description: "LLM model to use for analysis"
  
  - name: "enhance_image"
    type: "boolean"
    required: false
    default: true
    description: "Whether to enhance image for better OCR results"

# Flow execution steps
steps:
  - name: "handle_file"
    executor: "file_handler"
    description: "Handle uploaded image file and create temporary storage"
    config:
      file_content: "{{ inputs.file.content }}"
      filename: "{{ inputs.file.filename }}"
      save_temp: true
      validate_format: true
      allowed_formats: [".jpg", ".jpeg", ".png", ".tiff", ".tif", ".bmp", ".gif"]
      max_size: 10485760  # 10MB
    outputs:
      - "temp_path"
      - "filename"
      - "file_extension"

  - name: "extract_text"
    executor: "ocr_processor"
    depends_on: ["handle_file"]
    description: "Extract text directly from original image using OCR"
    config:
      image_path: "{{ steps.handle_file.temp_path }}"
      provider: "{{ inputs.ocr_provider }}"
      languages: "{{ inputs.languages }}"
      confidence_threshold: 0.0
      return_bboxes: true
      return_confidence: true
    outputs:
      - "text"
      - "confidence"
      - "word_count"
      - "provider"

  - name: "analyze_content"
    executor: "llm_analyzer"
    depends_on: ["extract_text"]
    description: "Analyze extracted text using LLM with dynamic prompting"
    config:
      text: "{{ steps.extract_text.text }}"
      prompt: >-
        {% if inputs.analysis_type == 'custom' and inputs.get('custom_prompt') %}
        {{ inputs.custom_prompt }}
        
        Text to analyze: {{ steps.extract_text.text }}
        {% elif inputs.analysis_type == 'summary' %}
        Please provide a concise summary of the following text extracted from an image:
        
        {{ steps.extract_text.text }}
        {% elif inputs.analysis_type == 'key_points' %}
        Please identify and list the key points from the following text extracted from an image:
        
        {{ steps.extract_text.text }}
        {% elif inputs.analysis_type == 'entities' %}
        Please identify and extract all named entities (people, places, organizations, dates, etc.) from the following text extracted from an image:
        
        {{ steps.extract_text.text }}
        {% elif inputs.analysis_type == 'comprehensive' %}
        Please provide a comprehensive analysis of the following text extracted from an image, including:
        - Summary of content
        - Key themes and topics
        - Important entities mentioned
        - Overall context and meaning
        
        Text to analyze: {{ steps.extract_text.text }}
        {% else %}
        Please analyze the following text extracted from an image using OCR:
        
        {{ steps.extract_text.text }}
        {% endif %}
      model: "{{ inputs.llm_model }}"
      provider: "ollama"
    outputs:
      - "analysis"

  - name: "format_response"
    executor: "response_formatter"
    depends_on: ["analyze_content"]
    description: "Format final response with OCR and analysis results"
    config:
      template: "detailed"
      include_metadata: true
      include_steps: true
      custom_fields:
        flow: "ocr_analysis"
        image_file: "{{ steps.handle_file.filename }}"
        image_extension: "{{ steps.handle_file.file_extension }}"
        ocr_provider: "{{ inputs.ocr_provider }}"
        languages: "{{ inputs.languages }}"
        extracted_text: "{{ steps.extract_text.text }}"
        ocr_confidence: "{{ steps.extract_text.confidence }}"
        word_count: "{{ steps.extract_text.word_count }}"
        analysis: "{{ steps.analyze_content.analysis }}"
        llm_model: "{{ inputs.llm_model }}"
        analysis_type: "{{ inputs.analysis_type }}"

# Output schema - defines what the API returns
outputs:
  - name: "image_file"
    value: "{{ steps.handle_file.filename }}"
    description: "Name of the processed image file"
  
  - name: "image_extension"
    value: "{{ steps.handle_file.file_extension }}"
    description: "File extension of the processed image"
  
  - name: "extracted_text"
    value: "{{ steps.extract_text.text }}"
    description: "Text extracted from image via OCR"
  
  - name: "text_length"
    value: "{{ steps.extract_text.text | length }}"
    description: "Length of extracted text"
  
  - name: "word_count"
    value: "{{ steps.extract_text.word_count }}"
    description: "Number of words extracted"
  
  - name: "ocr_confidence"
    value: "{{ steps.extract_text.confidence }}"
    description: "OCR extraction confidence score"
  
  - name: "ocr_provider_used"
    value: "{{ inputs.ocr_provider }}"
    description: "OCR provider used for text extraction"
  
  - name: "languages_used"
    value: "{{ inputs.languages }}"
    description: "Languages used for OCR processing"
  
  - name: "analysis"
    value: "{{ steps.analyze_content.analysis }}"
    description: "LLM analysis of extracted text"
  
  - name: "llm_model_used"
    value: "{{ inputs.llm_model }}"
    description: "LLM model used for analysis"

# Flow configuration
config:
  timeout: 300  # 5 minutes
  retry_count: 2
  async_execution: false
  cleanup_temp_files: true
